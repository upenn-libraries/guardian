#!/usr/bin/env ruby

require 'todo_runner'
require 'stronghold'
require 'yaml'

TodoRunner.define do

  LOG_FILE = 'completion.txt'

  def zip_package
    return true if success
  end

  def validate_transfer_data todo_data
    %i{ compressed_destination glacier_description glacier_vault }.each do |key|
      raise ArgumentError, "Require transfer value not present #{key.inspect}: " \
        "#{todo_data}" unless todo_data[key]
    end

    unless File.exist? todo_data[:compressed_destination]
      raise ArgumentError, "Cannot find :compressed_destination: " \
        "#{todo_data[:compressed_destination]}"
    end
  end

  def load_data todo_file
    begin
      YAML::load todo_file
    rescue
      raise ArgumentError, "Unablle to read todo_file as YAML: #{todo_file.path}"
    end
  end

  def glacier_transfer todo_data
    validate_transfer_data todo_data
    file_path           = todo_data[:compressed_destination]
    archive_description = todo_data[:glacier_description]
    vault_id            = todo_data[:glacier_vault]

    client  = Stronghold::Client.new
    return client.create_backup vault_id, file_path, archive_description
  end

  def log_complete k_v
    # write a single line to completion file
  end

  def update_fort_db
    # load contents of completion file into fort stronghold db
    File.write(LOG_FILE)
  end

  start :zip

  task :zip, on_fail: :FAIL, next_step: :glacier do |todo_file|
    data = YAML.load todo_file
    zip_package
  end

  task :glacier, on_fail: :FAIL, next_step: :SUCCESS do |todo_file|
    begin
      data = load_data(todo_file)
      k_v  = glacier_transfer(data)
      puts k_v
      log_complete(k_v)
      true
    rescue ArgumentError => ex
      puts "ERROR #{ex.message}"
      false
    end
  end

  after :all do
    update_fort_db
  end

end